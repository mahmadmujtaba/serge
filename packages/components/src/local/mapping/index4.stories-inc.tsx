import React from 'react'
import { Story } from '@storybook/react/types-6-0'
import { deepCopy } from '@serge/helpers'
import { MappingConstraints } from '@serge/custom-types'

// Import component files
import Mapping from './index'
import MappingPropTypes from './types/props'
import docs from './README.md'
import Assets from '../assets'
import { HexGrid } from '../hex-grid'

// import data types
import { Phase, serverPath } from '@serge/config'

/* Import mock data */
import { smallScaleForces as forces, smallScaleMappingConstraints as mapping, platformTypes } from '@serge/mocks'
import data from './data/atlantic-cells'

const wrapper: React.FC = (storyFn: any) => <div style={{ height: '700px' }}>{storyFn()}</div>

// const setPlanned = (planned: boolean, forceId: number, assetId: number, value: string[]): void => {
//   const force = forces[forceId]
//   if (force && force.assets && force.assets.length) {
//     const asset = force.assets[assetId]
//     if (asset) {
//       const list = planned ? asset.plannedTurns : asset.history
//       value.forEach((val: string, index: number) => {
//         if (list && list.length && list[index] && list[index].route) {
//           const route = list[index].route
//           if (route && route.length) {
//             route[0] = val
//           }
//         }
//       })
//     }
//   }
// }

// const forces: ForceData[] = deepCopy(atlanticForces)
// if (forces && forces.length) {
//   if (forces[1].assets && forces[1].assets.length) {
//     forces[1].assets[0].position = '8718aab70ffffff'
//     forces[1].assets[1].position = '8718aab64ffffff'

//     setPlanned(true, 1, 0, ['8718a84daffffff', '8718a84c2ffffff'])
//     setPlanned(false, 1, 0, ['8718aab18ffffff', '8718aaa24ffffff', '8718aab09ffffff'])

//     setPlanned(false, 1, 1, ['8718a8781ffffff'])
//     setPlanned(true, 1, 1, ['8718a87a4ffffff', '8718a844effffff'])
//   }
//   if (forces[2].assets && forces[2].assets.length) {
//     forces[2].assets[0].position = '8718aab2affffff'
//     forces[2].assets[1].position = '8718aab64ffffff'

//     setPlanned(false, 2, 0, ['8718aab20ffffff'])
//     setPlanned(true, 2, 0, ['8718a84daffffff', '8718a84c3ffffff'])

//     setPlanned(false, 2, 1, ['8718aab15ffffff'])
//     setPlanned(true, 2, 1, ['8718aab0cffffff'])
//   }
// }

async function fetchMock (): Promise<any> {
  return {
    json: (): any => data
  }
}

export default {
  title: 'local/LocalMapping',
  component: Mapping,
  decorators: [wrapper],
  parameters: {
    readme: {
      // Show readme before story
      content: docs
    },
    options: {
      // We have no addons enabled in this story, so the addon panel should be hidden
      showPanel: true
    },
    controls: {
      expanded: true
    }
  },
  argTypes: {
    playerForce: {
      name: 'View as',
      control: {
        type: 'radio',
        defaultValue: 'White',
        options: [
          'White',
          'Blue',
          'Red'
        ]
      }
    },
    phase: {
      name: 'Game phase',
      control: {
        type: 'radio',
        defaultValue: Phase.Planning,
        options: [
          Phase.Planning,
          Phase.Adjudication
        ]
      }
    },
    wargameInitiated: {
      name: 'Wargame has been initiated',
      control: {
        type: 'boolean'
      }
    },
    children: {
      table: {
        disable: true
      }
    }
  }
}

const localConstraints: MappingConstraints = deepCopy(mapping)
localConstraints.tileLayer = {
  url: './atlantic_tiles/{z}/{x}/{y}.png',
  attribution: 'Generated by QTiles'
}

const osmConstraints: MappingConstraints = deepCopy(mapping)
osmConstraints.tileLayer = {
  url: 'https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png',
  attribution: 'Data Â© <a href="http://osm.org/copyright">OpenStreetMap</a>'
}

const detailedConstraints: MappingConstraints = deepCopy(mapping)
detailedConstraints.tileLayer = {
  url: './atlantic_tiles/{z}/{x}/{y}.png',
  attribution: 'Generated by QTiles'
}
detailedConstraints.gridCellsURL = `${serverPath}atlantic-detailed.json`
detailedConstraints.tileDiameterMins = 30

interface StoryPropTypes extends MappingPropTypes {
  showAllowableCells?: boolean
  allowableOrigin?: string
  allowableTerrain?: string
  mappingConstraints: MappingConstraints
}

const forceNames = {
  White: 'umpire',
  Blue: 'Blue',
  Red: 'Red'
}

const Template: Story<StoryPropTypes> = (args) => {
  const {
    playerForce,
    ...props
  } = args
  return (
    <Mapping
      playerForce={forceNames[playerForce]}
      fetchOverride={fetchMock}
      {...props}
    />
  )
}

const twoFourHours = 1000 * 60 * 60 * 24

/**
 * DEFAULT VIEW
 */
export const NaturalEarth = Template.bind({})
NaturalEarth.args = {
  forces: forces,
  gameTurnTime: twoFourHours,
  canSubmitOrders: true,
  platforms: platformTypes,
  phase: Phase.Planning,
  wargameInitiated: true,
  turnNumber: 5,
  mapBar: true,
  mappingConstraints: localConstraints,
  children: (
    <>
      <HexGrid />
      <Assets />
    </>
  )
}

export const OpenStreetMap = Template.bind({})
OpenStreetMap.args = {
  forces: forces,
  gameTurnTime: twoFourHours,
  canSubmitOrders: true,
  platforms: platformTypes,
  wargameInitiated: true,
  phase: Phase.Planning,
  turnNumber: 5,
  mapBar: true,
  mappingConstraints: osmConstraints,
  children: (
    <>
      <Assets />
      <HexGrid />
    </>
  )
}

export const DetailedCells = Template.bind({})
DetailedCells.args = {
  forces: forces,
  gameTurnTime: twoFourHours,
  canSubmitOrders: true,
  platforms: platformTypes,
  phase: Phase.Planning,
  wargameInitiated: true,
  turnNumber: 5,
  mapBar: true,
  mappingConstraints: detailedConstraints,
  children: (
    <>
      <HexGrid />
      <Assets />
    </>
  )
}
