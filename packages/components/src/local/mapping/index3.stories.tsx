import React from 'react'
import { Story } from '@storybook/react/types-6-0'
import { deepCopy } from '@serge/helpers'
import { MappingConstraints } from '@serge/custom-types'

/* Import mock data */
import { atlanticForces, platformTypes } from '@serge/mocks'

// Import component files
import Mapping from './index'
import MappingPropTypes from './types/props'
import docs from './README.md'
import Assets from '../assets'
import { HexGrid } from '../hex-grid'

// import data types
import { Phase } from '@serge/config'

const wrapper: React.FC = (storyFn: any) => <div style={{ height: '700px' }}>{storyFn()}</div>

export default {
  title: 'local/AtlanticMapping',
  component: Mapping,
  decorators: [wrapper],
  parameters: {
    readme: {
      // Show readme before story
      content: docs
    },
    options: {
      // We have no addons enabled in this story, so the addon panel should be hidden
      showPanel: true
    },
    controls: {
      expanded: true
    }
  },
  argTypes: {
    playerForce: {
      name: 'View as',
      control: {
        type: 'radio',
        defaultValue: 'Blue',
        options: [
          'White',
          'Blue',
          'Red'
        ]
      }
    },
    phase: {
      name: 'Game phase',
      control: {
        type: 'radio',
        defaultValue: Phase.Planning,
        options: [
          Phase.Planning,
          Phase.Adjudication
        ]
      }
    },
    wargameInitiated: {
      name: 'Wargame has been initiated',
      control: {
        type: 'boolean'
      }
    },
    children: {
      table: {
        disable: true
      }
    }
  }
}

const atlanticConstraints = {
  "bounds": [
      [
          85,
          -70.0
      ],
      [
          30.0,
          40
      ]
  ],
  "maxNativeZoom": 7,
  "maxZoom": 10,
  "minZoom": 3,
  "minZoomHexes": 6,
  "targetDataset": "Atlantic",
  "tileDiameterMins": 18//,
  // "tileLayer": {
  //     "attribution": "Generated by QTiles",
  //     "url": "./atlantic_tiles/{z}/{x}/{y}.png"
  // }
}

const localConstraints: MappingConstraints = deepCopy(atlanticConstraints)
localConstraints.tileLayer = {
  url: './atlantic_tiles/{z}/{x}/{y}.png',
  attribution: 'Generated by QTiles'
}

const osmConstraints: MappingConstraints = deepCopy(atlanticConstraints)
osmConstraints.tileLayer = {
  url: './atlantic_tiles/{z}/{x}/{y}.png',
//  url: 'https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png',
  attribution: 'Data Â© <a href="http://osm.org/copyright">OpenStreetMap</a>'
}

interface StoryPropTypes extends MappingPropTypes {
  showAllowableCells?: boolean
  allowableOrigin?: string
  allowableTerrain?: string
  mappingConstraints: MappingConstraints
}

const Template: Story<StoryPropTypes> = (args) => {
  const {
    playerForce,
    ...props
  } = args
  const forceNames = {
    White: 'umpire',
    Blue: 'Blue',
    Red: 'Red'
  }
  return (
    <Mapping
      playerForce={forceNames[playerForce]}
      {...props}
    />
  )
}

console.log('ATLANTIC FORCES', atlanticForces[1], platformTypes[0])

/**
 * DEFAULT VIEW
 */
export const Default = Template
Default.args = {
  forces: atlanticForces,
  playerForce: 'Blue',
  canSubmitOrders: false,
  platforms: platformTypes,
  phase: Phase.Planning,
  turnNumber: 5,
  mapBar: false
}

export const NaturalEarth = Default
NaturalEarth.args = {
  forces: atlanticForces,
  playerForce: 'Blue',
  canSubmitOrders: false,
  platforms: platformTypes,
  phase: Phase.Planning,
  turnNumber: 5,
  mapBar: false,
  mappingConstraints: localConstraints,
  children: (
    <>
      <HexGrid />
      <Assets />
    </>
  )
}

export const OpenStreetMap = Default
OpenStreetMap.args = {
  forces: atlanticForces,
  playerForce: 'Blue',
  canSubmitOrders: false,
  platforms: platformTypes,
  phase: Phase.Planning,
  turnNumber: 5,
  mapBar: false,
  mappingConstraints: osmConstraints,
  children: (
    <>
      <Assets />
      <HexGrid />
    </>
  )
}
