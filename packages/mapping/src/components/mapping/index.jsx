import React, { useEffect, useRef }  from 'react'
import L from 'leaflet'
import GridImplementation from '../../helpers/GridImplementation'

import './styles.scss'

const Mapping = ({ image_top, image_left, image_bottom, image_right }) => {

    
    const mapRef = useRef(null)
    const gridRef = useRef(null)
    const markerRef = useRef(null)
    const platformRef = useRef(null)
    const tileRef = useRef(null)

    useEffect(() => {
        mapRef.current = L.map('map', {
            minZoom: 8,
            maxZoom: 12,
            center: [(image_top + image_bottom) / 2, (image_left + image_right) / 2],
            zoom: 9,
            attributionControl: false,
            zoomAnimation: false
        });
    }, [])

    useEffect(() => {
        // L.control.layers(baseLayers, overlays, {
        //     collapsed: false
        // }).addTo(mapRef.current);

        const overlays = {
            "Grid":  gridRef.current,
            "Tooltips": markerRef.current,
            "Platforms": platformRef.current
        }

        const baseLayers = {
            "OpenStreetMap": tiledBackdrop,
            "Tiled image": tileRef.current
        }

        const tiledBackdrop = L.tileLayer('https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png', {
            attribution: 'Data Â© <a href="http://osm.org/copyright">OpenStreetMap</a>'
        });

        const imageBounds = [[image_top, image_left], [image_bottom, image_right]];

        tileRef.current = L.tileLayer('./tiles/{z}/{x}/{y}.png', {
            minZoom: 8,
            maxZoom: 12,
            tms: false,
            bounds: imageBounds,
            attribution: 'Generated by QTiles'
        }).addTo(mapRef.current);

    }, [tileRef.current])

    useEffect(() => {
        gridRef.current = L.layerGroup()
        gridRef.current.addTo(mapRef.current)
        markerRef.current = L.layerGroup()
        // note: we don't show the marker layer by default - only when zoomed in
        platformRef.current = L.layerGroup();
        platformRef.current.addTo(mapRef.current);
    })

    useEffect(() => {
        /*
        *  CREATE THE GRID
        */
        const delta = 0.0416666
        const origin = L.latLng(14.1166, 42.4166)
        const grid = new GridImplementation({origin, delta, width: 24, height: 21, markerLayer: markerRef.current, grid: gridRef.current})
        // add hexagons to this map
        grid.addShapesTo(gridRef.current)
    }, [])

    useEffect(() => {
        // only show the markers when zoomed in
        mapRef.current.on('zoomend', function () {
            const loaded = mapRef.current.hasLayer(markerRef.current)
            if (mapRef.current.getZoom() < 11) {
                if (loaded) {
                    mapRef.current.removeLayer(markerRef.current);
                }
            } else if (!loaded) {
                mapRef.current.addLayer(markerRef.current);
            }
        });

        mapRef.current.zoomControl.setPosition('topleft');
        // L.control.mousePosition().addTo(mapRef.current);
    }, [])


    useEffect(() => {
        return () => {
          console.log("Map unmounted");
        };
      }, []);

    return (
        <div id="map" className="mapping"></div>
    )
}

export default Mapping